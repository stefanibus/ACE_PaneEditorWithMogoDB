{"ast":null,"code":"// import { connect, ObjectId } from \"../../../utils/database\";\n// # OR fake db\nimport { connect, ObjectId } from \"../../../utils/fake-Database\";\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    // case \"PUT\":\n    //   const randomId = Math.floor(Math.random() * (100 - 1) + 1);\n    //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n    //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n    //   res\n    //     .status(200)\n    //     .json({ success: true, data: { newRecordId: randomId } });\n    //   break;\n    case \"PUT\":\n      try {\n        const {\n          html,\n          css,\n          js\n        } = req.body;\n        const {\n          db\n        } = await connect();\n        const result = await db.collection(collectionName).insertOne({\n          html,\n          css,\n          js\n        });\n        res.status(200).json({\n          success: true,\n          data: {\n            newRecordId: result.insertedId\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n    // case \"POST\":\n    //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n    //   // await  new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n    //   res.status(200).json({ success: true, data: { updatedRecord: true } });\n    //   break;\n\n    case \"POST\":\n      try {\n        const {\n          html,\n          css,\n          js,\n          id\n        } = req.body;\n        const {\n          db\n        } = await connect();\n        await db.collection(collectionName).updateOne({\n          _id: ObjectId(id)\n        }, {\n          $set: {\n            html: html,\n            css: css,\n            js: js\n          }\n        });\n        res.status(200).json({\n          success: true,\n          data: {\n            updatedRecord: true\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n    // case \"GET\":\n    //   const data = {\n    //     html: `<div>hello from pen ${id}</div>`,\n    //     css: `div { color: blue}`,\n    //     js: `console.log(\"hi there\")`,\n    //   };\n    //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n    //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n    //   res.status(200).json({ data });\n    //   break;\n\n    case \"GET\":\n      try {\n        const {\n          db\n        } = await connect();\n        const data = await db.collection(collectionName).findOne({\n          _id: ObjectId(id)\n        });\n\n        if (!data) {\n          res.status(404).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          data\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false,\n        data: \"default\"\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["C:/Users/stefa/Documents/gitlab/WBS/ServerSide/CodePen_Next/my-code-pen/pages/api/pens/[id].js"],"names":["connect","ObjectId","req","res","query","id","method","html","css","js","body","db","result","collection","collectionName","insertOne","status","json","success","data","newRecordId","insertedId","error","console","log","updateOne","_id","$set","updatedRecord","findOne"],"mappings":"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","sourcesContent":["// import { connect, ObjectId } from \"../../../utils/database\";\r\n// # OR fake db\r\nimport { connect, ObjectId } from \"../../../utils/fake-Database\";\r\n\r\n\r\nexport default async (req, res) => {\r\n\r\n  const {\r\n    query: { id },\r\n    method,\r\n  } = req;\r\n  switch (method) {\r\n    // case \"PUT\":\r\n    //   const randomId = Math.floor(Math.random() * (100 - 1) + 1);\r\n    //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n    //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n    //   res\r\n    //     .status(200)\r\n    //     .json({ success: true, data: { newRecordId: randomId } });\r\n    //   break;\r\n\r\n\r\n  case \"PUT\":\r\n      try {\r\n        const { html, css, js } = req.body;\r\n        const { db } = await connect();\r\n\r\n        const result = await db.collection(collectionName).insertOne({\r\n          html,\r\n          css,\r\n          js,\r\n        });\r\n        res\r\n          .status(200)\r\n          .json({ success: true, data: { newRecordId: result.insertedId } });\r\n      } catch (error) {\r\n        console.log(error);\r\n        res.status(400).json({ success: false });\r\n      }\r\n    break;\r\n\r\n\r\n\r\n    // case \"POST\":\r\n    //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n    //   // await  new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n    //   res.status(200).json({ success: true, data: { updatedRecord: true } });\r\n    //   break;\r\n\r\n    case \"POST\":\r\n        try {\r\n          const { html, css, js, id } = req.body;\r\n          const { db } = await connect();\r\n\r\n          await db\r\n            .collection(collectionName)\r\n            .updateOne(\r\n              { _id: ObjectId(id) },\r\n              { $set: { html: html, css: css, js: js } }\r\n            );\r\n          res\r\n            .status(200)\r\n            .json({ success: true, data: { updatedRecord: true } });\r\n        } catch (error) {\r\n          console.log(error);\r\n          res.status(400).json({ success: false });\r\n        }\r\n      break;\r\n\r\n\r\n\r\n\r\n    // case \"GET\":\r\n    //   const data = {\r\n    //     html: `<div>hello from pen ${id}</div>`,\r\n    //     css: `div { color: blue}`,\r\n    //     js: `console.log(\"hi there\")`,\r\n    //   };\r\n    //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n    //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n    //   res.status(200).json({ data });\r\n    //   break;\r\n\r\n    case \"GET\":\r\n      try {\r\n        const { db } = await connect();\r\n        const data = await db\r\n          .collection(collectionName)\r\n          .findOne({ _id: ObjectId(id) });\r\n        if (!data) {\r\n          res.status(404).json({ success: false });\r\n        }\r\n        res.status(200).json({ data });\r\n      } catch (error) {\r\n        res.status(500).json({ success: false });\r\n      }\r\n    break;\r\n\r\n\r\n\r\n\r\n    default:\r\n      res.status(400).json({ success: false, data: \"default\" });\r\n      break;\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}