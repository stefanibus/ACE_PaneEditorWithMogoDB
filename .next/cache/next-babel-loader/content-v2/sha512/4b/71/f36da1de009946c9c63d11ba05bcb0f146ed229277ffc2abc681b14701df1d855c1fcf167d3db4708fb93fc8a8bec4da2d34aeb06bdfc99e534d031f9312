{"ast":null,"code":"// import { connect, ObjectId } from \"../../../utils/database\";\nimport { connect, ObjectId } from \"../../../utils/fakeDatabase\";\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n  const collectionName = \"pens\";\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const {\n          db\n        } = await connect();\n        const data = await db.collection(collectionName).findOne({\n          _id: ObjectId(id)\n        });\n\n        if (!data) {\n          res.status(404).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          data\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case \"PUT\":\n      try {\n        const {\n          html,\n          css,\n          js\n        } = req.body;\n        const {\n          db\n        } = await connect();\n        const result = await db.collection(collectionName).insertOne({\n          html,\n          css,\n          js\n        });\n        res.status(200).json({\n          success: true,\n          data: {\n            newRecordId: result.insertedId\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const {\n          html,\n          css,\n          js,\n          id\n        } = req.body;\n        const {\n          db\n        } = await connect();\n        await db.collection(collectionName).updateOne({\n          _id: ObjectId(id)\n        }, {\n          $set: {\n            html: html,\n            css: css,\n            js: js\n          }\n        });\n        res.status(200).json({\n          success: true,\n          data: {\n            updatedRecord: true\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false,\n        data: \"default\"\n      });\n      break;\n  }\n}); // // import { connect, ObjectId } from \"../../../utils/database\";\n// // # OR fake db\n// import { connect, ObjectId } from \"../../../utils/fake-Database\";\n// export default async (req, res) => {\n//   const {\n//     query: { id },\n//     method,\n//   } = req;\n//   switch (method) {\n//     // case \"PUT\":\n//     //   const randomId = Math.floor(Math.random() * (100 - 1) + 1);\n//     //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n//     //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n//     //   res\n//     //     .status(200)\n//     //     .json({ success: true, data: { newRecordId: randomId } });\n//     //   break;\n//   case \"PUT\":\n//       try {\n//         const { html, css, js } = req.body;\n//         const { db } = await connect();\n//         const result = await db.collection(collectionName).insertOne({\n//           html,\n//           css,\n//           js,\n//         });\n//         res\n//           .status(200)\n//           .json({ success: true, data: { newRecordId: result.insertedId } });\n//       } catch (error) {\n//         console.log(error);\n//         res.status(400).json({ success: false });\n//       }\n//     break;\n//     // case \"POST\":\n//     //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n//     //   // await  new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n//     //   res.status(200).json({ success: true, data: { updatedRecord: true } });\n//     //   break;\n//     case \"POST\":\n//         try {\n//           const { html, css, js, id } = req.body;\n//           const { db } = await connect();\n//           await db\n//             .collection(collectionName)\n//             .updateOne(\n//               { _id: ObjectId(id) },\n//               { $set: { html: html, css: css, js: js } }\n//             );\n//           res\n//             .status(200)\n//             .json({ success: true, data: { updatedRecord: true } });\n//         } catch (error) {\n//           console.log(error);\n//           res.status(400).json({ success: false });\n//         }\n//       break;\n//     // case \"GET\":\n//     //   const data = {\n//     //     html: `<div>hello from pen ${id}</div>`,\n//     //     css: `div { color: blue}`,\n//     //     js: `console.log(\"hi there\")`,\n//     //   };\n//     //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n//     //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n//     //   res.status(200).json({ data });\n//     //   break;\n//     case \"GET\":\n//       try {\n//         const { db } = await connect();\n//         const data = await db\n//           .collection(collectionName)\n//           .findOne({ _id: ObjectId(id) });\n//         if (!data) {\n//           res.status(404).json({ success: false });\n//         }\n//         res.status(200).json({ data });\n//       } catch (error) {\n//         res.status(500).json({ success: false });\n//       }\n//     break;\n//     default:\n//       res.status(400).json({ success: false, data: \"default\" });\n//       break;\n//   }\n// };","map":{"version":3,"sources":["C:/Users/stefa/Documents/gitlab/WBS/ServerSide/CodePen_Next/my-code-pen/pages/api/pens/[id].js"],"names":["connect","ObjectId","req","res","query","id","method","collectionName","db","data","collection","findOne","_id","status","json","success","error","html","css","js","body","result","insertOne","newRecordId","insertedId","console","log","updateOne","$set","updatedRecord"],"mappings":"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","sourcesContent":["// import { connect, ObjectId } from \"../../../utils/database\";\r\n import { connect, ObjectId } from \"../../../utils/fakeDatabase\";\r\n\r\nexport default async (req, res) => {\r\n  const {\r\n    query: { id },\r\n    method,\r\n  } = req;\r\n  const collectionName = \"pens\";\r\n  switch (method) {\r\n    case \"GET\":\r\n      try {\r\n        const { db } = await connect();\r\n        const data = await db\r\n          .collection(collectionName)\r\n          .findOne({ _id: ObjectId(id) });\r\n        if (!data) {\r\n          res.status(404).json({ success: false });\r\n        }\r\n        res.status(200).json({ data });\r\n      } catch (error) {\r\n        res.status(500).json({ success: false });\r\n      }\r\n      break;\r\n    case \"PUT\":\r\n      try {\r\n        const { html, css, js } = req.body;\r\n        const { db } = await connect();\r\n\r\n        const result = await db.collection(collectionName).insertOne({\r\n          html,\r\n          css,\r\n          js,\r\n        });\r\n        res\r\n          .status(200)\r\n          .json({ success: true, data: { newRecordId: result.insertedId } });\r\n      } catch (error) {\r\n        console.log(error);\r\n        res.status(400).json({ success: false });\r\n      }\r\n      break;\r\n    case \"POST\":\r\n      try {\r\n        const { html, css, js, id } = req.body;\r\n        const { db } = await connect();\r\n\r\n        await db\r\n          .collection(collectionName)\r\n          .updateOne(\r\n            { _id: ObjectId(id) },\r\n            { $set: { html: html, css: css, js: js } }\r\n          );\r\n        res\r\n          .status(200)\r\n          .json({ success: true, data: { updatedRecord: true } });\r\n      } catch (error) {\r\n        console.log(error);\r\n        res.status(400).json({ success: false });\r\n      }\r\n      break;\r\n    default:\r\n      res.status(400).json({ success: false, data: \"default\" });\r\n      break;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // import { connect, ObjectId } from \"../../../utils/database\";\r\n// // # OR fake db\r\n// import { connect, ObjectId } from \"../../../utils/fake-Database\";\r\n\r\n\r\n// export default async (req, res) => {\r\n\r\n//   const {\r\n//     query: { id },\r\n//     method,\r\n//   } = req;\r\n//   switch (method) {\r\n//     // case \"PUT\":\r\n//     //   const randomId = Math.floor(Math.random() * (100 - 1) + 1);\r\n//     //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n//     //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n//     //   res\r\n//     //     .status(200)\r\n//     //     .json({ success: true, data: { newRecordId: randomId } });\r\n//     //   break;\r\n\r\n\r\n//   case \"PUT\":\r\n//       try {\r\n//         const { html, css, js } = req.body;\r\n//         const { db } = await connect();\r\n\r\n//         const result = await db.collection(collectionName).insertOne({\r\n//           html,\r\n//           css,\r\n//           js,\r\n//         });\r\n//         res\r\n//           .status(200)\r\n//           .json({ success: true, data: { newRecordId: result.insertedId } });\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//         res.status(400).json({ success: false });\r\n//       }\r\n//     break;\r\n\r\n\r\n\r\n//     // case \"POST\":\r\n//     //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n//     //   // await  new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n//     //   res.status(200).json({ success: true, data: { updatedRecord: true } });\r\n//     //   break;\r\n\r\n//     case \"POST\":\r\n//         try {\r\n//           const { html, css, js, id } = req.body;\r\n//           const { db } = await connect();\r\n\r\n//           await db\r\n//             .collection(collectionName)\r\n//             .updateOne(\r\n//               { _id: ObjectId(id) },\r\n//               { $set: { html: html, css: css, js: js } }\r\n//             );\r\n//           res\r\n//             .status(200)\r\n//             .json({ success: true, data: { updatedRecord: true } });\r\n//         } catch (error) {\r\n//           console.log(error);\r\n//           res.status(400).json({ success: false });\r\n//         }\r\n//       break;\r\n\r\n\r\n\r\n\r\n//     // case \"GET\":\r\n//     //   const data = {\r\n//     //     html: `<div>hello from pen ${id}</div>`,\r\n//     //     css: `div { color: blue}`,\r\n//     //     js: `console.log(\"hi there\")`,\r\n//     //   };\r\n//     //   // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n//     //   // await new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n//     //   res.status(200).json({ data });\r\n//     //   break;\r\n\r\n//     case \"GET\":\r\n//       try {\r\n//         const { db } = await connect();\r\n//         const data = await db\r\n//           .collection(collectionName)\r\n//           .findOne({ _id: ObjectId(id) });\r\n//         if (!data) {\r\n//           res.status(404).json({ success: false });\r\n//         }\r\n//         res.status(200).json({ data });\r\n//       } catch (error) {\r\n//         res.status(500).json({ success: false });\r\n//       }\r\n//     break;\r\n\r\n\r\n\r\n\r\n//     default:\r\n//       res.status(400).json({ success: false, data: \"default\" });\r\n//       break;\r\n//   }\r\n// };"]},"metadata":{},"sourceType":"module"}