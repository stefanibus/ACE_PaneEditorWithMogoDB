{"ast":null,"code":"export default (async (req, res) => {\n  //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n  const fakeLoadingTime = () => {\n    console.log('test fake loadingtime');\n    new Promise(resolve => {\n      setTimeout(() => resolve(), 4000);\n    });\n  };\n\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case \"PUT\":\n      const randomId = Math.floor(Math.random() * (100 - 1) + 1); // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n      // await new Promise((resolve) => {\n      //   setTimeout(() => resolve(), 2000);\n      // });\n\n      await fakeLoadingTime();\n      res.status(200).json({\n        success: true,\n        data: {\n          newRecordId: randomId\n        }\n      });\n      break;\n\n    case \"POST\":\n      // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n      // await new Promise((resolve) => {\n      //   setTimeout(() => resolve(), 2000);\n      // });\n      await fakeLoadingTime();\n      res.status(200).json({\n        success: true,\n        data: {\n          updatedRecord: true\n        }\n      });\n      break;\n\n    case \"GET\":\n      const data = {\n        html: `<div>hello from pen ${id}</div>`,\n        css: `div { color: blue}`,\n        js: `console.log(\"hi there\")`\n      }; // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\n      // await new Promise((resolve) => {\n      //   setTimeout(() => resolve(), 2000);\n      // });\n\n      await fakeLoadingTime();\n      res.status(200).json({\n        data\n      });\n      break;\n\n    default:\n      res.status(400).json({\n        success: false,\n        data: \"default\"\n      });\n      break;\n  }\n});","map":{"version":3,"sources":["C:/Users/stefa/Documents/gitlab/WBS/ServerSide/CodePen_Next/my-code-pen/pages/api/pens/[id].js"],"names":["req","res","fakeLoadingTime","console","log","Promise","resolve","setTimeout","query","id","method","randomId","Math","floor","random","status","json","success","data","newRecordId","updatedRecord","html","css","js"],"mappings":"AAAA,gBAAe,OAAOA,GAAP,EAAYC,GAAZ,KAAoB;AAIjC;AACA,QAAMC,eAAe,GAAM,MAAM;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACE,QAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC3BC,MAAAA,UAAU,CAAC,MAAMD,OAAO,EAAd,EAAkB,IAAlB,CAAV;AACD,KAFG;AAGP,GALD;;AAMA,QAAM;AACJE,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA;AAFI,MAGFV,GAHJ;;AAIA,UAAQU,MAAR;AACE,SAAK,KAAL;AACE,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,MAAM,CAAvB,IAA4B,CAAvC,CAAjB,CADF,CAEI;AACA;AACA;AACA;;AACH,YAAMZ,eAAe,EAArB;AACCD,MAAAA,GAAG,CACAc,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,WAAW,EAAER;AAAf;AAAvB,OAFR;AAGA;;AACF,SAAK,MAAL;AACI;AACA;AACA;AACA;AACH,YAAMT,eAAe,EAArB;AACCD,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,IAAI,EAAE;AAAEE,UAAAA,aAAa,EAAE;AAAjB;AAAvB,OAArB;AACA;;AACF,SAAK,KAAL;AACE,YAAMF,IAAI,GAAG;AACXG,QAAAA,IAAI,EAAG,uBAAsBZ,EAAG,QADrB;AAEXa,QAAAA,GAAG,EAAG,oBAFK;AAGXC,QAAAA,EAAE,EAAG;AAHM,OAAb,CADF,CAMI;AACA;AACA;AACA;;AACJ,YAAOrB,eAAe,EAAtB;AACED,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEE,QAAAA;AAAF,OAArB;AACA;;AACF;AACEjB,MAAAA,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,IAAI,EAAE;AAAxB,OAArB;AACA;AAnCJ;AAqCD,CApDD","sourcesContent":["export default async (req, res) => {\r\n\r\n\r\n\r\n  //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n  const fakeLoadingTime =    () => {\r\n        console.log('test fake loadingtime')\r\n          new Promise((resolve) => {\r\n        setTimeout(() => resolve(), 4000);\r\n      });\r\n  }\r\n  const {\r\n    query: { id },\r\n    method,\r\n  } = req;\r\n  switch (method) {\r\n    case \"PUT\":\r\n      const randomId = Math.floor(Math.random() * (100 - 1) + 1);\r\n        // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n        // await new Promise((resolve) => {\r\n        //   setTimeout(() => resolve(), 2000);\r\n        // });\r\n     await fakeLoadingTime();\r\n      res\r\n        .status(200)\r\n        .json({ success: true, data: { newRecordId: randomId } });\r\n      break;\r\n    case \"POST\":\r\n        // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n        // await new Promise((resolve) => {\r\n        //   setTimeout(() => resolve(), 2000);\r\n        // });\r\n     await fakeLoadingTime();\r\n      res.status(200).json({ success: true, data: { updatedRecord: true } });\r\n      break;\r\n    case \"GET\":\r\n      const data = {\r\n        html: `<div>hello from pen ${id}</div>`,\r\n        css: `div { color: blue}`,\r\n        js: `console.log(\"hi there\")`,\r\n      };\r\n        // //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE\r\n        // await new Promise((resolve) => {\r\n        //   setTimeout(() => resolve(), 2000);\r\n        // });\r\n    await  fakeLoadingTime();\r\n      res.status(200).json({ data });\r\n      break;\r\n    default:\r\n      res.status(400).json({ success: false, data: \"default\" });\r\n      break;\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}