{"ast":null,"code":"import { connect, ObjectId } from \"../../../utils/database\"; //import { connect, ObjectId } from \"../../../utils/fake-Database\";\n\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n  const collectionName = \"pensName\";\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const {\n          db\n        } = await connect();\n        const data = await db.collection(collectionName).findOne({\n          _id: ObjectId(id)\n        });\n\n        if (!data) {\n          res.status(404).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          data\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case \"PUT\":\n      try {\n        const {\n          html,\n          css,\n          js,\n          userID,\n          projectName\n        } = req.body;\n        const {\n          db\n        } = await connect();\n        const result = await db.collection(collectionName).insertOne({\n          html,\n          css,\n          js,\n          userID,\n          projectName\n        });\n        res.status(200).json({\n          success: true,\n          data: {\n            newRecordId: result.insertedId\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const {\n          html,\n          css,\n          js,\n          id,\n          userID,\n          projectName\n        } = req.body;\n        const {\n          db\n        } = await connect();\n        await db.collection(collectionName).updateOne({\n          _id: ObjectId(id)\n        }, {\n          $set: {\n            html: html,\n            css: css,\n            js: js,\n            userID: userID,\n            projectName: projectName\n          }\n        }); //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE // await  new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\n\n        res.status(200).json({\n          success: true,\n          data: {\n            updatedRecord: true\n          }\n        });\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false,\n        data: \"default\"\n      });\n      break;\n\n    case \"DELETE\":\n      try {\n        const {\n          db\n        } = await connect();\n        const data = await db.collection(collectionName).deleteOne({\n          _id: ObjectId(id)\n        });\n        res.status(200).json({\n          success: true,\n          data\n        });\n      } catch (error) {\n        res.status(500).json({\n          success: false\n        });\n      }\n\n      break;\n  }\n});","map":{"version":3,"sources":["C:/Users/stefa/Documents/gitlab/WBS/ServerSide/CodePen_Next/my-code-pen/pages/api/pens/[id].js"],"names":["connect","ObjectId","req","res","query","id","method","collectionName","db","data","collection","findOne","_id","status","json","success","error","html","css","js","userID","projectName","body","result","insertOne","newRecordId","insertedId","console","log","updateOne","$set","updatedRecord","deleteOne"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,yBAAlC,C,CACA;;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADH;AAEJC,IAAAA;AAFI,MAGFJ,GAHJ;AAIA,QAAMK,cAAc,GAAG,UAAvB;;AACA,UAAQD,MAAR;AACE,SAAK,KAAL;AACE,UAAI;AACF,cAAM;AAAEE,UAAAA;AAAF,YAAS,MAAMR,OAAO,EAA5B;AACA,cAAMS,IAAI,GAAG,MAAMD,EAAE,CAClBE,UADgB,CACLH,cADK,EAEhBI,OAFgB,CAER;AAAEC,UAAAA,GAAG,EAAEX,QAAQ,CAACI,EAAD;AAAf,SAFQ,CAAnB;;AAGA,YAAI,CAACI,IAAL,EAAW;AACTN,UAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;AACD;;AACDZ,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEL,UAAAA;AAAF,SAArB;AACD,OATD,CASE,OAAOO,KAAP,EAAc;AACdb,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF,SAAK,KAAL;AACE,UAAI;AACF,cAAM;AAAEE,UAAAA,IAAF;AAAQC,UAAAA,GAAR;AAAaC,UAAAA,EAAb;AAAiBC,UAAAA,MAAjB;AAAyBC,UAAAA;AAAzB,YAAyCnB,GAAG,CAACoB,IAAnD;AACA,cAAM;AAAEd,UAAAA;AAAF,YAAS,MAAMR,OAAO,EAA5B;AAEA,cAAMuB,MAAM,GAAG,MAAMf,EAAE,CAACE,UAAH,CAAcH,cAAd,EAA8BiB,SAA9B,CAAwC;AAC3DP,UAAAA,IAD2D;AAE3DC,UAAAA,GAF2D;AAG3DC,UAAAA,EAH2D;AAI3DC,UAAAA,MAJ2D;AAK3DC,UAAAA;AAL2D,SAAxC,CAArB;AAOAlB,QAAAA,GAAG,CACAU,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBN,UAAAA,IAAI,EAAE;AAAEgB,YAAAA,WAAW,EAAEF,MAAM,CAACG;AAAtB;AAAvB,SAFR;AAGD,OAdD,CAcE,OAAOV,KAAP,EAAc;AACdW,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAb,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF,SAAK,MAAL;AACE,UAAI;AACF,cAAM;AAAEE,UAAAA,IAAF;AAAQC,UAAAA,GAAR;AAAaC,UAAAA,EAAb;AAAiBd,UAAAA,EAAjB;AAAqBe,UAAAA,MAArB;AAA6BC,UAAAA;AAA7B,YAA6CnB,GAAG,CAACoB,IAAvD;AACA,cAAM;AAAEd,UAAAA;AAAF,YAAS,MAAMR,OAAO,EAA5B;AAEA,cAAMQ,EAAE,CACLE,UADG,CACQH,cADR,EAEHsB,SAFG,CAGF;AAAEjB,UAAAA,GAAG,EAAEX,QAAQ,CAACI,EAAD;AAAf,SAHE,EAIF;AAAEyB,UAAAA,IAAI,EAAE;AAAEb,YAAAA,IAAI,EAAEA,IAAR;AAAcC,YAAAA,GAAG,EAAEA,GAAnB;AAAwBC,YAAAA,EAAE,EAAEA,EAA5B;AAAgCC,YAAAA,MAAM,EAAEA,MAAxC;AAAgDC,YAAAA,WAAW,EAAEA;AAA7D;AAAR,SAJE,CAAN,CAJE,CAUA;;AACFlB,QAAAA,GAAG,CACAU,MADH,CACU,GADV,EAEGC,IAFH,CAEQ;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBN,UAAAA,IAAI,EAAE;AAAEsB,YAAAA,aAAa,EAAE;AAAjB;AAAvB,SAFR;AAGD,OAdD,CAcE,OAAOf,KAAP,EAAc;AACdW,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AACAb,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;;AACF;AACEZ,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBN,QAAAA,IAAI,EAAE;AAAxB,OAArB;AACA;;AACF,SAAK,QAAL;AACE,UAAI;AACF,cAAM;AAAED,UAAAA;AAAF,YAAS,MAAMR,OAAO,EAA5B;AACA,cAAMS,IAAI,GAAG,MAAMD,EAAE,CAClBE,UADgB,CACLH,cADK,EACWyB,SADX,CACqB;AAAEpB,UAAAA,GAAG,EAAEX,QAAQ,CAACI,EAAD;AAAf,SADrB,CAAnB;AAEAF,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBN,UAAAA;AAAjB,SAArB;AACD,OALD,CAKE,OAAOO,KAAP,EAAc;AACdb,QAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACD;;AACD;AAnEJ;AAqED,CA3ED","sourcesContent":["import { connect, ObjectId } from \"../../../utils/database\";\r\n//import { connect, ObjectId } from \"../../../utils/fake-Database\";\r\n\r\nexport default async (req, res) => {\r\n  const {\r\n    query: { id },\r\n    method,\r\n  } = req;\r\n  const collectionName = \"pensName\";\r\n  switch (method) {\r\n    case \"GET\":\r\n      try {\r\n        const { db } = await connect();\r\n        const data = await db\r\n          .collection(collectionName)\r\n          .findOne({ _id: ObjectId(id) });\r\n        if (!data) {\r\n          res.status(404).json({ success: false });\r\n        }\r\n        res.status(200).json({ data });\r\n      } catch (error) {\r\n        res.status(500).json({ success: false });\r\n      }\r\n      break;\r\n    case \"PUT\":\r\n      try {\r\n        const { html, css, js, userID, projectName } = req.body;\r\n        const { db } = await connect();\r\n\r\n        const result = await db.collection(collectionName).insertOne({\r\n          html,\r\n          css,\r\n          js,\r\n          userID,\r\n          projectName\r\n        });\r\n        res\r\n          .status(200)\r\n          .json({ success: true, data: { newRecordId: result.insertedId } });\r\n      } catch (error) {\r\n        console.log(error);\r\n        res.status(400).json({ success: false });\r\n      }\r\n      break;\r\n    case \"POST\":\r\n      try {\r\n        const { html, css, js, id, userID, projectName } = req.body;\r\n        const { db } = await connect();\r\n\r\n        await db\r\n          .collection(collectionName)\r\n          .updateOne(\r\n            { _id: ObjectId(id) },\r\n            { $set: { html: html, css: css, js: js, userID: userID, projectName: projectName } }\r\n          );\r\n          //FAKE A LONG  LOADING TIME  IN ORDER TO SEE THE LOADING INTERFACE TESTWISE // await  new Promise((resolve) => {  setTimeout(() => resolve(), 4000);  });\r\n        res\r\n          .status(200)\r\n          .json({ success: true, data: { updatedRecord: true } });\r\n      } catch (error) {\r\n        console.log(error);\r\n        res.status(400).json({ success: false });\r\n      }\r\n      break;\r\n    default:\r\n      res.status(400).json({ success: false, data: \"default\" });\r\n      break;\r\n    case \"DELETE\":\r\n      try {\r\n        const { db } = await connect();\r\n        const data = await db\r\n          .collection(collectionName).deleteOne({ _id: ObjectId(id) });\r\n        res.status(200).json({ success: true, data });\r\n      } catch (error) {\r\n        res.status(500).json({ success: false });\r\n      }\r\n      break;\r\n  }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}